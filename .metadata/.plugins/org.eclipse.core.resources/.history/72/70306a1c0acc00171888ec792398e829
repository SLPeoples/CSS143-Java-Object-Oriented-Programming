
public class Queue extends List{
	public void enqueue(Object obj){
		super.append(obj);
	}
	
	public Object dequeue(){
		try {
			if(super.size() == 0)
				throw new LinkedListException();
		} catch (LinkedListException e) {
			System.out.println("Cannot invoke pop() on an empty stack");
			System.exit(0);
		}
	return super.remove(0);
		return super.remove(0);
	}
	@Override
	public void insert(Object next, int index){
		enqueue(next);
	}
	@Override
	public Object remove(int index){
		return dequeue();
	}
	//I would not choose to override the isEmpty and indexOf methods because the
		//Program will behave the same way in a stack and a queue.
		public static void main(String args[]){
			Queue a = new Queue();
			a.enqueue("a");
			a.enqueue("b");
			System.out.println(a.toString());
			System.out.println("dequeued: " +a.dequeue());
			System.out.println(a.toString());
			System.out.println("dequeued: " +a.dequeue());
			System.out.println("the stack is empty: " +a.isEmpty());
			//System.out.println("popped: " +a.pop()); //Out of bounds
			a.insert("a", 1);
			a.insert("b", 2);
			a.insert("c", 1);
			a.insert("d", 2);
			System.out.println(a.toString());
			a.remove(3);
			System.out.println(a.toString());
			a.remove(1);
			System.out.println(a.toString());
		}
}
