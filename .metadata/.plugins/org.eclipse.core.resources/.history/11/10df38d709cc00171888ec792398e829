/**
 * This class will use Nodes to form a linked list.
 * @author Samuel L. Peoples, 1527650
 **/

public class List {
	private Node head;
	
	// Constructor with no parameters for outer class
	public List( ) {
		head = new Node();
	}
	
	// This is an inner class specifically utilized for List class,
	// thus no setter or getters are needed
	private class Node  {
		private Object data;
		private Node next;
		
		// Constructor with no parameters for inner class
		public Node(){
			data = null;
    		next = null;
    		}

		// Parametrized constructor for inner class
		public Node(Object d, Node n){
			data = d; //shallow
			next = n;
			}
		}
	public void insert(Object next, int index){
		try{
			if(index>size())
				  throw new LinkedListException();
			if(head == null || head.data == null)
				if(index == 0)
					head = new Node(next, null);
				else throw new LinkedListException();
    	  else if(head.next == null)
    		  if(index == 1)
    			  head.next = new Node(next, null);
    		  else throw new LinkedListException();
    	  else{
    		  int i = 0;
    		  Node current = head;
    		  if(index == 0){
    			  if(current.data != null)
					  head = new Node(next, head);
				  else throw new LinkedListException();
    		  }
    		  while(i<=index-1){
    			  if(index == 1){
    				  if(current.data != null)
    					  current.next = new Node(next, current.next);
    				  else throw new LinkedListException();
    			  }
				  current = current.next;
    			  i++;
    			  if(i==index-1){
    				  if(current.data != null)
    					  current.next = new Node(next, current.next);
    				  else throw new LinkedListException();
    				  }
    			  }
    		  }
			}
		catch(LinkedListException e){
			System.out.println("Index out of bounds; "+next.toString()+" discarded.");
			System.exit(0);
		}
	}
	
	public Object remove(int index){
		int i = 0;
		try{
			if(head == null || head.data == null)
				throw new LinkedListException();
			if(index == 0){
				Object retVal = head.data;
				head = head.next;
				return retVal;
			}
			else{
				Node current = head;
				while(i<=index){
					if(current.next == null && i == index-1)
						throw new LinkedListException();
					if(i == index-1){
						Object retVal = current.next.data;
						current.next = current.next.next;
						return retVal;
					}
					else{
						current = current.next;
						i++;
					}
				}
			}
		}
		catch(LinkedListException e){
			System.out.println("Index out of bounds, did not remove position: " +index);
			System.exit(0);
		}
		return null;
	}
	
	public int size(){
		int counter = 0;
		Node current = head;
		if(head == null || head.data == null)
			return 0;
		while(current.next != null){
			counter++;
			current = current.next;
		}
		counter++;
		return counter;
	}
	
	public String toString(){
		Node current = head;
		String retVal = "";
		if(current == null)
			return retVal;
		while(current.data != null){
			if(current.next != null){
				retVal+= current.data+", ";
				current = current.next;
			}
			else{
				retVal+= current.data;
				break;
			}
		}
		return retVal;
	}
	
	public boolean isEmpty(){
		try{
			if(head.data == null)
				return true;
			else return false;
		}
		catch(NullPointerException e){
			return true;
		}
	}
	public int indexOf(Object target){
		Node current = head;
        Object itemAtPosition;
        int index = 0;
        while (current.data != null) {
            itemAtPosition = current.data;
            if (itemAtPosition.equals(target))
              return index;
            if(current.next != null){
            	current = current.next;
            	index++;
            }
            else
            	break;
          }
          return -1;            // Target not found!
	}
	
	public void append(Object target){
		if(isEmpty())
			head = new Node(target, null);
		else if(size() == 1)
			head.next = new Node(target, null);
		else{
			Node current = head;
			for(int i=0;i<size();i++){
				if(current.next == null)
					current.next = new Node(target, null);
				else
					current = current.next;
			}
		}
	}
	public Object getIndex(int n){
		Node current = head;
        int index = 0;
        while (current.data != null) {
            if (index == n)
              return current.data;
            if(current.next != null){
            	current = current.next;
            	index++;
            }
            else
            	break;
          }
          return null;            // Target not found!
	}
	// There is no need to modify the driver
	public static void main(String[] args) {
		List list = new List();
		System.out.println("list is empty?: "+list.isEmpty());
		//list.remove(0); //Out of bounds
		//list.insert("z", 5); //Out of bounds
		list.insert("a", 0);
		System.out.println("list is empty?: "+list.isEmpty());
		//list.insert("z", 5); //Out of bounds
		System.out.println(list.toString());
		//list.remove(0); //Works
		//list.remove(1); //Out of bounds

		list.insert("b", 1);
		System.out.println("list is empty?: "+list.isEmpty());
		list.insert("c", 2);
		list.insert("1", 1);
		list.insert("3", 3);
		list.insert("0", 0);
		//list.insert("3", 7); //Out of bounds
		System.out.println("Index of 0: " +list.indexOf("0"));
		System.out.println("Index of a: " +list.indexOf("a"));
		System.out.println("Index of 1: " +list.indexOf("1"));
		System.out.println("Index of c: " +list.indexOf("c"));
		System.out.println("Index of z: " +list.indexOf("z"));
		System.out.println(list.size()+"; "+list.toString()); //6
		//0, a, 1, b, 3, c
		list.remove(0);
		//a, 1, b, 3, c
		System.out.println(list.size()+"; "+list.toString()); //5
		list.remove(1);
		//a, b, 3, c
		System.out.println(list.size()+"; "+list.toString()); //4
		list.remove(2);
		//a, b, c
		System.out.println(list.size()+"; "+list.toString()); //3
		list.remove(2);
		//a, b
		System.out.println(list.size()+"; "+list.toString()); //2
		list.remove(0);
		//b
		System.out.println(list.size()+"; "+list.toString()); //1
		list.remove(0);
		System.out.println(list.size()+"; "+list.toString()); //0
		System.out.println("list is empty?: "+list.isEmpty());
		list.remove(7); //Out of bounds
		
		list.append("z");
		System.out.println(list.size()+"; "+list.toString()); //1
		list.append("y");
		System.out.println(list.size()+"; "+list.toString()); //2
		list.insert("a", 0);
		System.out.println(list.size()+"; "+list.toString()); //3
		list.append("x");
		System.out.println(list.size()+"; "+list.toString()); //4
    }    
}

          
