
public class Stack extends List{
	public void push(Object obj){
		super.append(obj);
	}
	public Object pop(){
		Object retVal = super.remove(super.size()-1);
		if(retVal == null)
			try {
				throw new LinkedListException();
			} catch (LinkedListException e) {
				System.out.println("Pop failed, stack empty");
			}
		return retVal;
	}
	@Override
	public void insert(Object next, int index){
		push(next);
	}
	@Override
	public Object remove(int index){
		return pop();
	}
	
	//I would not choose to override the isEmpty and indexOf methods because the
	//Program will behave the same way in a stack and a queue.
	public static void main(String args[]){
		Stack a = new Stack();
		a.push("a");
		a.push("b");
		System.out.println(a.toString());
		System.out.println("popped: " +a.pop());
		System.out.println(a.toString());
		System.out.println("popped: " +a.pop());
		System.out.println("the stack is empty: " +a.isEmpty());
		System.out.println("popped: " +a.pop()); //Out of bounds
		a.insert("a", 1);
		a.insert("b", 2);
		a.insert("c", 1);
		a.insert("d", 2);
		System.out.println(a.toString());
		a.remove(3);
		System.out.println(a.toString());
		a.remove(1);
		System.out.println(a.toString());
	}
}
