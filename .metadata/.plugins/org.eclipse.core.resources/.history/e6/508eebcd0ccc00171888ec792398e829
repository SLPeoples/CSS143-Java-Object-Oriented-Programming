
public class Queue extends List{
	public void enqueue(Object obj){
		super.append(obj);
	}
	
	public Object dequeue(){
		try {
			if(super.size() == 0)
				throw new LinkedListException();
		} catch (LinkedListException e) {
			System.out.println("Cannot invoke dequeue() on an empty queue");
			System.exit(0);
		}
		return super.remove(0);
	}
	@Override
	public void insert(Object next, int index){
		enqueue(next);
	}
	@Override
	public Object remove(int index){
		return dequeue();
	}
	//I would not choose to override the isEmpty and indexOf methods because the
	//Program will behave the same way in a stack and a queue.
	public static void main(String args[]){
		Queue a = new Queue();
		a.enqueue("a");
		a.enqueue("b");
		System.out.println(a.toString());
		System.out.println("dequeued: " +a.dequeue());
		System.out.println(a.toString());
		System.out.println("dequeued: " +a.dequeue());
		System.out.println("the queue is empty: " +a.isEmpty());
		//System.out.println("popped: " +a.dequeue()); //Out of bounds
		a.insert("a", 1);
		a.insert("b", 2);
		a.insert("c", 1);
		a.insert("d", 2);
		System.out.println(a.toString());
		a.remove(3);
		System.out.println(a.toString());
		a.remove(1);
		System.out.println(a.toString());
		System.out.println("list is empty?: "+list.isEmpty());
		//list.remove(0); //Out of bounds
		//list.insert("z", 5); //Out of bounds
		System.out.println("Inserting \"a\" at position 0");
		list.insert("a", 0);
		System.out.println("list is empty?: "+list.isEmpty());
		//list.insert("z", 5); //Out of bounds
		System.out.println("List: "+list.toString());
		//list.remove(0); //Works
		//list.remove(1); //Out of bounds
		System.out.println("Inserting \"b\" at position 1");
		list.insert("b", 1);
		System.out.println("list is empty?: "+list.isEmpty());
		System.out.println("Inserting \"c\" at position 2");
		list.insert("c", 2);
		System.out.println("Inserting \"1\" at position 1");
		list.insert("1", 1);
		System.out.println("Inserting \"3\" at position 3");
		list.insert("3", 3);
		System.out.println("Inserting \"0\" at position 0");
		list.insert("0", 0);
		//list.insert("3", 7); //Out of bounds
		System.out.println("Index of 0: " +list.indexOf("0"));
		System.out.println("Index of a: " +list.indexOf("a"));
		System.out.println("Index of 1: " +list.indexOf("1"));
		System.out.println("Index of c: " +list.indexOf("c"));
		System.out.println("Index of z: " +list.indexOf("z"));
		System.out.println("What's at index 0? "+list.getIndex(0));
		System.out.println("What's at index 1? "+list.getIndex(1));
		System.out.println("What's at index 2? "+list.getIndex(2));
		System.out.println("What's at index 3? "+list.getIndex(3));
		//System.out.println("What's at index 7? "+list.getIndex(7));
		System.out.println(list.size()+"; "+list.toString()); //6
		//0, a, 1, b, 3, c
		list.remove(0);
		//a, 1, b, 3, c
		System.out.println(list.size()+"; "+list.toString()); //5
		list.remove(1);
		//a, b, 3, c
		System.out.println(list.size()+"; "+list.toString()); //4
		list.remove(2);
		//a, b, c
		System.out.println(list.size()+"; "+list.toString()); //3
		list.remove(2);
		//a, b
		System.out.println(list.size()+"; "+list.toString()); //2
		list.remove(0);
		//b
		System.out.println(list.size()+"; "+list.toString()); //1
		list.remove(0);
		System.out.println(list.size()+"; "+list.toString()); //0
		System.out.println("list is empty?: "+list.isEmpty());
		//list.remove(7); //Out of bounds
		
		list.append("z");
		System.out.println(list.size()+"; "+list.toString()); //1
		list.append("y");
		System.out.println(list.size()+"; "+list.toString()); //2
		list.insert("a", 0);
		System.out.println(list.size()+"; "+list.toString()); //3
		list.append("x");
		System.out.println(list.size()+"; "+list.toString()); //4
	}
}
